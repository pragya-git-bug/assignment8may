Assignment 8th May

Answer1
package backtrackingAssignment;

public class Q1 {

	public static boolean helper(int[] arr, int[] vis, int si, int curr_sum, int target, int k) {
		if (k == 1)
			return true;
		if (curr_sum > target)
			return false;
		if (curr_sum == target)
			return helper(arr, vis, 0, 0, target, k - 1);

		for (int i = si; i < arr.length; i++) {
			if (vis[i] == -1) {
				vis[i] = 1;
				if (helper(arr, vis, i + 1, curr_sum + arr[i], target, k) == true)
					return true;
				vis[i] = -1;
			}
		}
		return false;
	}

	public static boolean canPartition(int[] arr, int k) {
		int n = arr.length;
		int[] vis = new int[n];
		for (int i = 0; i < n; i++)
			vis[i] = -1;
		int sum = 0;
		for (int i = 0; i < n; i++)
			sum += arr[i];

		if (sum % k != 0)
			return false;
		return helper(arr, vis, 0, 0, sum / k, k);
	}

	public static void main(String[] args) {
		int[] arr = { 1, 2, 2, 3 };
		int n = 4;
		int k = 2;

		if (canPartition(arr, k) == true) {
			System.out.println("yes it is possible to partition the array.");
		} else
			System.out.println("no it is not possible to partition.");
	}
}

Answer2
package backtrackingAssignment;
import java.util.*;
/*Q2. Given an integer array arr, print all the possible permutations of
the given array.
Note : The array will only contain non repeating elements.
Input 1:arr = [1, 2, 3]
Output1:[[1,2,3] , [1,3,2] , [2,1,3] , [2,3,1] , [3,1,2] , [3,2,1]]*/
public class Q2 {

	public static void permute(int[] nums) {
		List<List<Integer>> result = new ArrayList<>();
		if (nums == null || nums.length == 0) {
			return;
		}

		permutationsHelper(result, nums, 0);

		for (List<Integer> list : result) {
			for (Integer item : list) {
				System.out.print(item + "  ");
			}
			System.out.println("");
		}
	}

	private static void permutationsHelper(List<List<Integer>> result, int[] nums, int start) {
		if (start == nums.length - 1) {
			List<Integer> list = new ArrayList<>();
			for (int n : nums) {
				list.add(n);
			}
			result.add(list);
			return;
		}
		for (int i = start; i < nums.length; i++) {
			swap(nums, start, i);
			permutationsHelper(result, nums, start + 1);
			swap(nums, start, i);
		}
	}

	private static void swap(int[] nums, int x, int y) {
		int t = nums[x];
		nums[x] = nums[y];
		nums[y] = t;
	}

	public static void main(String[] args) {
		int[] arr = { 1, 4, 2, 3 };
		System.out.println("The possible permutations are : ");
		permute(arr);
	}
}

Answer3
package backtrackingAssignment;

/*Q3. Given a collection of numbers, nums, that might contain
duplicates, return all possible unique permutations in any order.
Example 1:
Input: nums = [1,1,2]
Output: [[1,1,2], [1,2,1], [2,1,1]]
Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]*/
import java.util.*;

public class Q3 {
	public static void permuteUnique(int[] nums) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		if (nums == null || nums.length == 0)
			return;
		boolean[] used = new boolean[nums.length];
		List<Integer> list = new ArrayList<Integer>();
		Arrays.sort(nums);
		go(nums, used, list, result);

		for (List<Integer> li : result) {
			for (Integer item : li) {
				System.out.print(item + "  ");
			}
			System.out.println("");
		}
	}

	public static void go(int[] nums, boolean[] used, List<Integer> list, List<List<Integer>> res) {
		if (list.size() == nums.length) {
			res.add(new ArrayList<Integer>(list));
			return;
		}
		for (int i = 0; i < nums.length; i++) {
			if (used[i])
				continue;
			if (i > 0 && nums[i - 1] == nums[i] && !used[i - 1])
				continue;
			used[i] = true;
			list.add(nums[i]);
			go(nums, used, list, res);
			used[i] = false;
			list.remove(list.size() - 1);
		}
	}

	public static void main(String[] args) {
		int[] arr = { 1, 4, 4, 3 };
		System.out.println("The possible permutations are : ");
		permuteUnique(arr);
	}
}

Answer4
package backtrackingAssignment;

import java.util.Scanner;

/*Q4. Check if the product of some subset of an array is equal to the
target value.
Input : n = 5 , target = 16
Array = [2 3 2 5 4]
Here the target will be equal to 2x2x4 = 16
Output : YES
 */
public class Q4 {
	   static int n;
	   public static boolean solve(int n, int target, int a[], int i, int product) {
	       if (i == n) return (product == target);
	       boolean answer = false;

	       product *= a[i];
	       
	       answer |= solve(n, target, a, i + 1, product);
	       
	       product /= a[i];
	       
	       answer |= solve(n, target, a, i + 1, product);

	       return answer;
	   }
	   public static void main(String[] args) {
	       
	       Scanner sc = new Scanner(System.in);
	       System.out.println("Enter the number of elements you want and the value of target respectively : ");
	       
	       int n = sc.nextInt(), target = sc.nextInt();
	       int a[] = new int[n];
	       System.out.println("Enter the array elements");
	       for (int i = 0; i < n; i++) {
	           a[i] = sc.nextInt();
	       }
	       System.out.println((solve(n, target, a, 0, 1) ? "YES" : "NO"));
	   }
	}

Answer5
package backtrackingAssignment;

/*Q5. The n-queens puzzle is the problem of placing n queens on an n x
n chessboard such tha no two queens attack each other. Given an
integer n, return the number of distinct solutions to the n-queens puzzle.
Input:n = 4
Output:2
Explanation:There are two distinct solutions to the 4-queens puzzle as shown.
Input:n = 1
Output:1
*/
public class Q5 {
	public static void printSolution(int[][] board, int n) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static boolean isSafe(int board[][], int row, int column, int n) {
		int i, j;
		// check on the left row
		for (i = 0; i < column; i++) {
			if (board[row][i] == 1) {
				return false;
			}
		}

		// check for the upper diagonal in left direction
		for (i = row, j = column; i >= 0 && j >= 0; i--, j--) {
			if (board[i][j] == 1) {
				return false;
			}
		}

		// check for the lower diagonal in right direction
		for (i = row, j = column; i < n && j >= 0; i++, j--) {
			if (board[i][j] == 1) {
				return false;
			}
		}
		return true;
	}

	// function to solve n queen problem
	public static boolean solvenQueen(int board[][], int column, int n) {
		// Base case if you have placed all queens then return true
		if (column >= n) {
			return true;
		}

		// consider the column and try to place all the queens in
		// all the rows one by one
		for (int i = 0; i < n; i++) {
			// check if it is safe to place the queen or not
			if (isSafe(board, i, column, n) == true) {
				// place the queen on the board
				board[i][column] = 1;

				// recursive call to place all teh queens
				if (solvenQueen(board, column + 1, n) == true) {
					return true;
				}
			}

			// if placing the queen does not lead to solution backtrack
			board[i][column] = 0;
		}

		// if it is not possible to place the queen in any row of given column
		// then return false
		return false;
	}

	public static void main(String[] args) {
		int board[][] = { { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 } };

		if (solvenQueen(board, 0, board.length) == true) {
			printSolution(board, board.length);
		} else {
			System.out.println("Solution does not exist...");
		}
	}

}
